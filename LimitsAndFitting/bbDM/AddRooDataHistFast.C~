//#include "../../../../CMSSW_7_4_7/src/HiggsAnalysis/CombinedLimit/interface/RooParametricHist.h" 
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooGaussian.h"
#include "RooConstVar.h"
#include "RooChebychev.h"
#include "RooAddPdf.h"
#include "RooWorkspace.h"
#include "RooPlot.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "TFile.h"
#include "TH1.h"
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooDataHist.h"
#include "RooGaussian.h"
#include "TCanvas.h"
#include "RooPlot.h"
#include "TTree.h"
#include "TH1D.h"
//#include <chrono>
#include "TRandom.h"
using namespace RooFit ;

void AddRooDataHist(  std::vector<TString > rootfiles){

  //auto start = std::chrono::high_resolution_clock::now();

  //gSystem->Exec("rm combined_model.root");
  
  
  TString wsname = "bbDM_2016";
  RooWorkspace *ws_in = new RooWorkspace(wsname, wsname) ;

  std::vector<TString> names;
  names.clear();
  names.push_back("ZJets");
  names.push_back("WJets");
  names.push_back("Top");
  names.push_back("STop");
  names.push_back("GJets");
  names.push_back("QCD");
  names.push_back("DYJets");
  names.push_back("DIBOSON");
  names.push_back("data_obs");
  
  
  names.push_back("LO_scalar_mphi_400_mchi_50");	
  names.push_back("LO_scalar_mphi_500_mchi_200");	
  names.push_back("LO_scalar_mphi_350_mchi_100");	
  names.push_back("LO_pseudo_mphi_300_mchi_50");	
  names.push_back("LO_scalar_mphi_50_mchi_50");	
  names.push_back("LO_scalar_mphi_100_mchi_10");	
  names.push_back("LO_pseudo_mphi_20_mchi_1");	
  names.push_back("LO_scalar_mphi_350_mchi_1");	
  names.push_back("LO_scalar_mphi_1000_mchi_1");	
  names.push_back("LO_scalar_mphi_200_mchi_1");	
  names.push_back("LO_pseudo_mphi_500_mchi_200");	
  names.push_back("LO_pseudo_mphi_750_mchi_350");	
  names.push_back("LO_scalar_mphi_500_mchi_1");	
  names.push_back("LO_scalar_mphi_500_mchi_100");	
  names.push_back("LO_scalar_mphi_500_mchi_50");	
  names.push_back("LO_scalar_mphi_10_mchi_10");	
  names.push_back("LO_scalar_mphi_100_mchi_40");	
  names.push_back("LO_pseudo_mphi_1000_mchi_350");	
  names.push_back("LO_pseudo_mphi_50_mchi_50");	
  names.push_back("LO_scalar_mphi_1000_mchi_450");	
  names.push_back("LO_scalar_mphi_300_mchi_100");	
  names.push_back("LO_pseudo_mphi_50_mchi_10");	
  names.push_back("LO_pseudo_mphi_350_mchi_50");	
  names.push_back("NLO_pseudo_mphi_50_mchi_1");	
  names.push_back("NLO_pseudo_mphi_500_mchi_1");	
  names.push_back("NLO_scalar_mphi_300_mchi_100");	
  names.push_back("NLO_pseudo_mphi_500_mchi_100");	
  names.push_back("NLO_scalar_mphi_300_mchi_50");	
  names.push_back("NLO_pseudo_mphi_500_mchi_50");	
  names.push_back("NLO_pseudo_mphi_100_mchi_10");	
  names.push_back("NLO_scalar_mphi_500_mchi_100");	
  names.push_back("NLO_scalar_mphi_400_mchi_100");	
  names.push_back("NLO_scalar_mphi_750_mchi_1");	
  names.push_back("NLO_pseudo_mphi_350_mchi_50");	
  names.push_back("NLO_pseudo_mphi_200_mchi_50");	
  names.push_back("NLO_pseudo_mphi_100_mchi_1");	
  names.push_back("NLO_scalar_mphi_1000_mchi_450");	
  names.push_back("NLO_pseudo_mphi_400_mchi_50");	
  names.push_back("NLO_scalar_mphi_300_mchi_1");	
  names.push_back("NLO_scalar_mphi_400_mchi_1");	
  names.push_back("NLO_pseudo_mphi_10_mchi_10");	
  names.push_back("NLO_pseudo_mphi_1000_mchi_1");	
  names.push_back("NLO_scalar_mphi_1000_mchi_350");	
  names.push_back("NLO_scalar_mphi_350_mchi_1");	
  names.push_back("NLO_pseudo_mphi_50_mchi_10");	
  names.push_back("NLO_pseudo_mphi_400_mchi_100");	
  names.push_back("NLO_scalar_mphi_100_mchi_10");	
  names.push_back("NLO_pseudo_mphi_750_mchi_100");	
  names.push_back("NLO_pseudo_mphi_1000_mchi_450");	
  names.push_back("NLO_scalar_mphi_400_mchi_50");	
  names.push_back("NLO_scalar_mphi_350_mchi_50");	
  names.push_back("NLO_scalar_mphi_350_mchi_100");	
  names.push_back("NLO_scalar_mphi_50_mchi_10");	
  names.push_back("NLO_pseudo_mphi_350_mchi_1");	
  names.push_back("NLO_pseudo_mphi_50_mchi_50");	
  names.push_back("NLO_pseudo_mphi_300_mchi_50");	
  names.push_back("NLO_pseudo_mphi_350_mchi_100");	
  names.push_back("NLO_scalar_mphi_750_mchi_350");	
  names.push_back("NLO_pseudo_mphi_400_mchi_1");	
  names.push_back("NLO_scalar_mphi_10_mchi_10");	
  names.push_back("NLO_scalar_mphi_500_mchi_1");	
  
  

  

  
  for (int ifile=0; ifile<(int)rootfiles.size(); ifile++){
    
    
    TString filename_= rootfiles[ifile];
    
    TFile* freweighted = new TFile(filename_);
    
    filename_ = filename_.ReplaceAll(".root","_ws.root");
    TFile* fin = new TFile (filename_,"RECREATE");

    std::cout<<" ------------------"<< wsname<<" "<<filename_<<std::endl;
    
    std::cout<<" file opened "<<std::endl;
    
    for (int in=0; in<(int) names.size(); in++){
      TString histname = names[in];
      TString outhistname =  histname;
      
      std::cout<<" getting histogram "<<histname<<std::endl;
      bool objExist = freweighted->GetListOfKeys()->Contains(histname);
      std::cout<<" object exist ======"<<objExist<<std::endl;
      
      if (objExist){
	TH1F* h_rew = (TH1F*) freweighted->Get(histname);
	std::cout<<" got the histogram"<<std::endl;
	h_rew->SetName(outhistname);
	std::cout<<" renamed"<<std::endl;
	
	std::cout<< " integral for "<< outhistname <<" is "<<h_rew->Integral()<<std::endl;
	//fOut->WriteTObject(h_rew);
	if( h_rew->Integral() > 0.0 ){ 
	  
	  RooRealVar x("min(999.9999,met)_monohiggs","min(999.9999,met)_monohiggs",200,1000.) ;
	  
	  RooDataHist dh(outhistname, outhistname,  RooArgList(x), Import(*h_rew)) ;
	  ws_in->import(dh);
	}
      }//if( h_rew->Integral() > 0.0 ){
    }// while(!testFile.eof()) {
    ws_in->writeToFile(filename_);
  std:cout<<" writing WS "<<std::endl;
    ws_in->Print();
    
  }//for (int in=0; in<(int) names.size(); in++){
}
  //auto finish = std::chrono::high_resolution_clock::now();
  
  
  //std::chrono::duration<double> elapsed = finish - start;
  
  //std::cout << "Elapsed time: " << elapsed.count() << " s\n";
//}





void AddRooDataHistFast(){

  
  std::vector<TString> rootfiles;
  
  rootfiles.push_back("data/bbDM_2016_SR_1b.root");
  rootfiles.push_back("data/bbDM_2016_SR_2b.root");
  //rootfiles.push_back("data/bbDM_2016_Top_1b.root");
  //rootfiles.push_back("data/bbDM_2016_Top_2b.root");
  //rootfiles.push_back("data/bbDM_2016_Wenu_1b.root");
  //rootfiles.push_back("data/bbDM_2016_Wenu_2b.root");
  //rootfiles.push_back("data/bbDM_2016_Wmunu_1b.root");
  //rootfiles.push_back("data/bbDM_2016_Wmunu_2b.root");
  //rootfiles.push_back("data/bbDM_2016_Zee_1b.root");
  //rootfiles.push_back("data/bbDM_2016_Zee_2b.root");
  //rootfiles.push_back("data/bbDM_2016_Zmumu_1b.root");
  //rootfiles.push_back("data/bbDM_2016_Zmumu_2b.root");
  
  std::vector<TString> rootfilename;
  
  for (int ifile=0; ifile<(int)rootfiles.size(); ifile++){
    rootfilename.clear();
    rootfilename.push_back(rootfiles[ifile]);
    AddRooDataHist(rootfilename);
    
}

}
